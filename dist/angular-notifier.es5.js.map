{"version":3,"file":"angular-notifier.es5.js","sources":["src/library-inline/src/models/notifier-notification.model.ts","src/library-inline/src/services/notifier-queue.service.ts","src/library-inline/src/models/notifier-config.model.ts","src/library-inline/src/services/notifier.service.ts","src/library-inline/src/components/notifier-container.component.ts","src/library-inline/src/animation-presets/fade.animation-preset.ts","src/library-inline/src/animation-presets/slide.animation-preset.ts","src/library-inline/src/services/notifier-animation.service.ts","src/library-inline/src/services/notifier-timer.service.ts","src/library-inline/src/components/notifier-notification.component.ts","library-inline/src/notifier.module.ts","../library-inline/angular-notifier.ts"],"sourcesContent":["import { NotifierNotificationComponent } from './../components/notifier-notification.component';\n\n/**\n * Notification\n *\n * This class describes the structure of a notifiction, including all information it needs to live, and everyone else needs to work with it.\n */\nexport class NotifierNotification {\n\n\t/**\n\t * Unique notification ID, can be set manually to control the notification from outside later on\n\t */\n\tpublic id: string;\n\n\t/**\n\t * Notification type, will be used for constructing an appropriate class name\n\t */\n\tpublic type: string;\n\n\t/**\n\t * Notification message\n\t */\n\tpublic message: string;\n\n\t/**\n\t * Component reference of this notification, created and set during creation time\n\t */\n\tpublic component: NotifierNotificationComponent;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param {NotifierNotificationOptions} options Notifier options\n\t */\n\tpublic constructor( options: NotifierNotificationOptions ) {\n\n\t\tObject.assign( this, options );\n\n\t\t// If not set manually, we have to create a unique notification ID by ourselves. The ID generation relies on the current browser\n\t\t// datetime in ms, in praticular the moment this notification gets constructed. Concurrency, and thus two IDs being the exact same,\n\t\t// is not possible due to the action queue concept.\n\t\tif ( options.id === undefined ) {\n\t\t\tthis.id = `ID_${ new Date().getTime() }`;\n\t\t}\n\n\t}\n\n}\n\n/**\n * Notifiction options\n *\n * This interface describes which information are needed to create a new notification, or in other words, which information the external API\n * call must provide.\n */\nexport interface NotifierNotificationOptions {\n\n\t/**\n\t * Notification ID, optional\n\t */\n\tid?: string;\n\n\t/**\n\t * Notification type\n\t */\n\ttype: string;\n\n\t/**\n\t * Notificatin message\n\t */\n\tmessage: string;\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Subject } from 'rxjs/Subject';\n\nimport { NotifierAction } from './../models/notifier-action.model';\n\n/**\n * Notifier queue service\n *\n * In general, API calls don't get processed right away. Instead, we have to queue them up in order to prevent simultanious API calls\n * interfering with each other. This, at least in theory, is possible at any time. In particular, animations - which potentially overlap -\n * can cause changes in JS classes as well as affect the DOM. Therefore, the queue service takes all actions, puts them in a queue, and\n * processes them at the right time (which is when the previous action has been processed successfully).\n *\n * Technical sidenote:\n * An action looks pretty similar to the ones within the Flux / Redux pattern.\n */\n@Injectable()\nexport class NotifierQueueService {\n\n\t/**\n\t * Stream of actions, subscribable from outside\n\t */\n\tpublic readonly actionStream: Subject<NotifierAction>;\n\n\t/**\n\t * Queue of actions\n\t */\n\tprivate actionQueue: Array<NotifierAction>;\n\n\t/**\n\t * Flag, true if some action is currently in progress\n\t */\n\tprivate isActionInProgress: boolean;\n\n\t/**\n\t * Constructor\n\t */\n\tpublic constructor() {\n\t\tthis.actionStream = new Subject<NotifierAction>();\n\t\tthis.actionQueue = [];\n\t\tthis.isActionInProgress = false;\n\t}\n\n\t/**\n\t * Push a new action to the queue, and try to run it\n\t *\n\t * @param {NotifierAction} action Action object\n\t */\n\tpublic push( action: NotifierAction ): void {\n\t\tthis.actionQueue.push( action );\n\t\tthis.tryToRunNextAction();\n\t}\n\n\t/**\n\t * Continue with the next action (called when the current action is finished)\n\t */\n\tpublic continue(): void {\n\t\tthis.isActionInProgress = false;\n\t\tthis.tryToRunNextAction();\n\t}\n\n\t/**\n\t * Try to run the next action in the queue; we skip if there already is some action in progress, or if there is no action left\n\t */\n\tprivate tryToRunNextAction(): void {\n\t\tif ( this.isActionInProgress || this.actionQueue.length === 0 ) {\n\t\t\treturn; // Skip (the queue can now go drink a coffee as it has nothing to do anymore)\n\t\t}\n\t\tthis.isActionInProgress = true;\n\t\tthis.actionStream.next( this.actionQueue.shift() ); // Push next action to the stream, and remove the current action from the queue\n\t}\n\n}\n","/**\n * Notifier options\n */\nexport interface NotifierOptions {\n\tanimations?: {\n\t\tenabled?: boolean;\n\t\thide?: {\n\t\t\teasing?: string;\n\t\t\toffset?: number | false;\n\t\t\tpreset?: string;\n\t\t\tspeed?: number;\n\t\t};\n\t\toverlap?: number | false;\n\t\tshift?: {\n\t\t\teasing?: string;\n\t\t\tspeed?: number;\n\t\t};\n\t\tshow?: {\n\t\t\teasing?: string;\n\t\t\tpreset?: string;\n\t\t\tspeed?: number;\n\t\t};\n\t};\n\tbehaviour?: {\n\t\tautoHide?: number | false;\n\t\tonClick?: 'hide' | false;\n\t\tonMouseover?: 'pauseAutoHide' | 'resetAutoHide' | false;\n\t\tshowDismissButton?: boolean;\n\t\tstacking?: number | false;\n\t};\n\tposition?: {\n\t\thorizontal?: {\n\t\t\tdistance?: number;\n\t\t\tposition?: 'left' | 'middle' | 'right';\n\t\t};\n\t\tvertical?: {\n\t\t\tdistance?: number;\n\t\t\tgap?: number;\n\t\t\tposition?: 'top' | 'bottom';\n\t\t};\n\t};\n\ttheme?: string;\n}\n\n/**\n * Notifier configuration\n *\n * The notifier configuration defines what notifications look like, how they behave, and how they get animated. It is a global\n * configuration, which means that it only can be set once (at the beginning), and cannot be changed afterwards. Aligning to the world of\n * Angular, this configuration can be provided in the root app module - alternatively, a meaningful default configuration will be used.\n */\nexport class NotifierConfig implements NotifierOptions {\n\n\t/**\n\t * Customize animations\n\t */\n\tpublic animations: {\n\t\tenabled: boolean;\n\t\thide: {\n\t\t\teasing: string;\n\t\t\toffset: number | false;\n\t\t\tpreset: string;\n\t\t\tspeed: number;\n\t\t};\n\t\toverlap: number | false;\n\t\tshift: {\n\t\t\teasing: string;\n\t\t\tspeed: number;\n\t\t};\n\t\tshow: {\n\t\t\teasing: string;\n\t\t\tpreset: string;\n\t\t\tspeed: number;\n\t\t};\n\t};\n\n\t/**\n\t * Customize behaviour\n\t */\n\tpublic behaviour: {\n\t\tautoHide: number | false;\n\t\tonClick: 'hide' | false;\n\t\tonMouseover: 'pauseAutoHide' | 'resetAutoHide' | false;\n\t\tshowDismissButton: boolean;\n\t\tstacking: number | false;\n\t};\n\n\t/**\n\t * Customize positioning\n\t */\n\tpublic position: {\n\t\thorizontal: {\n\t\t\tdistance: number;\n\t\t\tposition: 'left' | 'middle' | 'right';\n\t\t};\n\t\tvertical: {\n\t\t\tdistance: number;\n\t\t\tgap: number;\n\t\t\tposition: 'top' | 'bottom';\n\t\t};\n\t};\n\n\t/**\n\t * Customize theming\n\t */\n\tpublic theme: string;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param {NotifierOptions} [customOptions={}] Custom notifier options, optional\n\t */\n\tpublic constructor( customOptions: NotifierOptions = {} ) {\n\n\t\t// Set default values\n\t\tthis.animations = {\n\t\t\tenabled: true,\n\t\t\thide: {\n\t\t\t\teasing: 'ease',\n\t\t\t\toffset: 50,\n\t\t\t\tpreset: 'fade',\n\t\t\t\tspeed: 300\n\t\t\t},\n\t\t\toverlap: 150,\n\t\t\tshift: {\n\t\t\t\teasing: 'ease',\n\t\t\t\tspeed: 300\n\t\t\t},\n\t\t\tshow: {\n\t\t\t\teasing: 'ease',\n\t\t\t\tpreset: 'slide',\n\t\t\t\tspeed: 300\n\t\t\t}\n\t\t};\n\t\tthis.behaviour = {\n\t\t\tautoHide: 7000,\n\t\t\tonClick: false,\n\t\t\tonMouseover: 'pauseAutoHide',\n\t\t\tshowDismissButton: true,\n\t\t\tstacking: 4\n\t\t};\n\t\tthis.position = {\n\t\t\thorizontal: {\n\t\t\t\tdistance: 12,\n\t\t\t\tposition: 'left'\n\t\t\t},\n\t\t\tvertical: {\n\t\t\t\tdistance: 12,\n\t\t\t\tgap: 10,\n\t\t\t\tposition: 'bottom'\n\t\t\t}\n\t\t};\n\t\tthis.theme = 'material';\n\n\t\t// The following merges the custom options into the notifier config, respecting the already set default values\n\t\t// This linear, more explicit and code-sizy workflow is preferred here over a recursive one (because we know the object structure)\n\t\t// Technical sidenote: Objects are merged, other types of values simply overwritten / copied\n\t\tif ( customOptions.theme !== undefined ) {\n\t\t\tthis.theme = customOptions.theme;\n\t\t}\n\t\tif ( customOptions.animations !== undefined ) {\n\t\t\tif ( customOptions.animations.enabled !== undefined ) {\n\t\t\t\tthis.animations.enabled = customOptions.animations.enabled;\n\t\t\t}\n\t\t\tif ( customOptions.animations.overlap !== undefined ) {\n\t\t\t\tthis.animations.overlap = customOptions.animations.overlap;\n\t\t\t}\n\t\t\tif ( customOptions.animations.hide !== undefined ) {\n\t\t\t\tObject.assign( this.animations.hide, customOptions.animations.hide );\n\t\t\t}\n\t\t\tif ( customOptions.animations.shift !== undefined ) {\n\t\t\t\tObject.assign( this.animations.shift, customOptions.animations.shift );\n\t\t\t}\n\t\t\tif ( customOptions.animations.show !== undefined ) {\n\t\t\t\tObject.assign( this.animations.show, customOptions.animations.show );\n\t\t\t}\n\t\t}\n\t\tif ( customOptions.behaviour !== undefined ) {\n\t\t\tObject.assign( this.behaviour, customOptions.behaviour );\n\t\t}\n\t\tif ( customOptions.position !== undefined ) {\n\t\t\tif ( customOptions.position.horizontal !== undefined ) {\n\t\t\t\tObject.assign( this.position.horizontal, customOptions.position.horizontal );\n\t\t\t}\n\t\t\tif ( customOptions.position.vertical !== undefined ) {\n\t\t\t\tObject.assign( this.position.vertical, customOptions.position.vertical );\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n","import { forwardRef, Inject, Injectable, Optional } from '@angular/core';\n\nimport { NotifierConfig } from './../models/notifier-config.model';\nimport { NotifierNotificationOptions } from './../models/notifier-notification.model';\nimport { NotifierQueueService } from './notifier-queue.service';\nimport { NotifierConfigToken } from './../notifier.module';\n\n/**\n * Notifier service\n *\n * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building\n * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into\n * actions, which then get thrown into the action queue - eventually being processed at the right moment.\n */\n@Injectable()\nexport class NotifierService {\n\n\t/**\n\t * Notifier queue service\n\t */\n\tprivate readonly queueService: NotifierQueueService;\n\n\t/**\n\t * Notifier configuration\n\t */\n\tprivate readonly config: NotifierConfig;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param {NotifierQueueService} notifierQueueService Notifier queue service\n\t * @param {NotifierConfig}       config               Notifier configuration, optionally injected as a dependency\n\t */\n\tpublic constructor(\n\t\tnotifierQueueService: NotifierQueueService,\n\t\t@Inject( forwardRef( () => NotifierConfigToken ) ) config: NotifierConfig // The forwardRef is (sadly) required here\n\t) {\n\t\tthis.queueService = notifierQueueService;\n\t\tthis.config = config;\n\t}\n\n\t/**\n\t * Get the notifier configuration\n\t *\n\t * @returns {NotifierConfig} Notifier configuration\n\t */\n\tpublic getConfig(): NotifierConfig {\n\t\treturn this.config;\n\t}\n\n\t/**\n\t * API: Show a new notification\n\t *\n\t * @param {NotifierNotificationOptions} notificationOptions Notification options\n\t */\n\tpublic show( notificationOptions: NotifierNotificationOptions ): void {\n\t\tthis.queueService.push( {\n\t\t\tpayload: notificationOptions,\n\t\t\ttype: 'SHOW'\n\t\t} );\n\t}\n\n\t/**\n\t * API: Hide a specific notification, given its ID\n\t *\n\t * @param {string} notificationId ID of the notification to hide\n\t */\n\tpublic hide( notificationId: string ): void {\n\t\tthis.queueService.push( {\n\t\t\tpayload: notificationId,\n\t\t\ttype: 'HIDE'\n\t\t} );\n\t}\n\n\t/**\n\t * API: Hide the newest notification\n\t */\n\tpublic hideNewest(): void {\n\t\tthis.queueService.push( {\n\t\t\ttype: 'HIDE_NEWEST'\n\t\t} );\n\t}\n\n\t/**\n\t * API: Hide the oldest notification\n\t */\n\tpublic hideOldest(): void {\n\t\tthis.queueService.push( {\n\t\t\ttype: 'HIDE_OLDEST'\n\t\t} );\n\t}\n\n\t/**\n\t * API: Hide all notifications at once\n\t */\n\tpublic hideAll(): void {\n\t\tthis.queueService.push( {\n\t\t\ttype: 'HIDE_ALL'\n\t\t} );\n\t}\n\n\t/**\n\t * API: Shortcut for showing a new notification\n\t *\n\t * @param {string} type             Type of the notification\n\t * @param {string} message          Message of the notification\n\t * @param {string} [notificationId] Unique ID for the notification (optional)\n\t */\n\tpublic notify( type: string, message: string, notificationId?: string ): void {\n\t\tlet notificationOptions: NotifierNotificationOptions = {\n\t\t\tmessage,\n\t\t\ttype\n\t\t};\n\t\tif ( notificationId !== undefined ) {\n\t\t\tnotificationOptions.id = notificationId;\n\t\t}\n\t\tthis.show( notificationOptions );\n\t}\n\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { NotifierAction } from './../models/notifier-action.model';\nimport { NotifierConfig } from './../models/notifier-config.model';\nimport { NotifierNotification } from './../models/notifier-notification.model';\nimport { NotifierQueueService } from './../services/notifier-queue.service';\nimport { NotifierService } from './../services/notifier.service';\nimport { NotifierNotificationComponent } from './notifier-notification.component';\n\n/**\n * Notifier container component\n * ----------------------------\n * This component acts as a wrapper for all notification components; consequently, it is responsible for creating a new notification\n * component and removing an existing notification component. Being more precicely, it also handles side effects of those actions, such as\n * shifting or even completely removing other notifications as well. Overall, this components handles actions coming from the queue service\n * by subscribing to its action stream.\n *\n * Technical sidenote:\n * This component has to be used somewhere in an application to work; it will not inject and create itself automatically, primarily in order\n * to not break the Angular AoT compilation. Moreover, this component (and also the notification components) set their change detection\n * strategy onPush, which means that we handle change detection manually in order to get the best performance. (#perfmatters)\n */\n@Component( {\n\tchangeDetection: ChangeDetectionStrategy.OnPush, // (#perfmatters)\n\thost: {\n\t\tclass: 'notifier__container'\n\t},\n\tselector: 'notifier-container',\n\ttemplate: `<ul><li *ngFor=\"let notification of notifications; trackBy: identifyNotification;\" class=\"notifier__container-list\"><notifier-notification (dismiss)=\"onNotificationDismiss( $event )\" (ready)=\"onNotificationReady( $event )\" [notification]=\"notification\"></notifier-notification></ul>`\n} )\nexport class NotifierContainerComponent implements OnDestroy, OnInit {\n\n\t/**\n\t * List of currently somewhat active notifications\n\t */\n\tpublic notifications: Array<NotifierNotification>;\n\n\t/**\n\t * Change detector\n\t */\n\tprivate readonly changeDetector: ChangeDetectorRef;\n\n\t/**\n\t * Notifier queue service\n\t */\n\tprivate readonly queueService: NotifierQueueService;\n\n\t/**\n\t * Notifier configuration\n\t */\n\tprivate readonly config: NotifierConfig;\n\n\t/**\n\t * Queue service observable subscription (saved for cleanup)\n\t */\n\tprivate queueServiceSubscription: Subscription;\n\n\t/**\n\t * Promise resolve function reference, temporarily used while the notification child component gets created\n\t */\n\tprivate tempPromiseResolver: () => void;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param {ChangeDetectorRef}    changeDetector       Change detector, used for manually triggering change detection runs\n\t * @param {NotifierQueueService} notifierQueueService Notifier queue service\n\t * @param {NotifierService}      notifierService      Notifier service\n\t */\n\tpublic constructor( changeDetector: ChangeDetectorRef, notifierQueueService: NotifierQueueService, notifierService: NotifierService ) {\n\t\tthis.changeDetector = changeDetector;\n\t\tthis.queueService = notifierQueueService;\n\t\tthis.config = notifierService.getConfig();\n\t\tthis.notifications = [];\n\t}\n\n\t/**\n\t * Component initialization lifecycle hook, connects this component to the action queue, and then handles incoming actions\n\t */\n\tpublic ngOnInit(): void {\n\t\tthis.queueServiceSubscription = this.queueService.actionStream.subscribe( ( action: NotifierAction ) => {\n\t\t\tthis.handleAction( action ).then( () => {\n\t\t\t\tthis.queueService.continue();\n\t\t\t} );\n\t\t} );\n\t}\n\n\t/**\n\t * Component destroyment lifecycle hook, cleans up the observable subsciption\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tif ( this.queueServiceSubscription ) {\n\t\t\tthis.queueServiceSubscription.unsubscribe();\n\t\t}\n\t}\n\n\t/**\n\t * Notification identifier, used as the ngFor trackby function\n\t *\n\t * @param   {number}               index        Index\n\t * @param   {NotifierNotification} notification Notifier notification\n\t * @returns {string}                            Notification ID as the unique identnfier\n\t */\n\tpublic identifyNotification( index: number, notification: NotifierNotification ): string {\n\t\treturn notification.id;\n\t}\n\n\t/**\n\t * Event handler, handles clicks on notification dismiss buttons\n\t *\n\t * @param {string} notificationId ID of the notification to dismiss\n\t */\n\tpublic onNotificationDismiss( notificationId: string ): void {\n\t\tthis.queueService.push( {\n\t\t\tpayload: notificationId,\n\t\t\ttype: 'HIDE'\n\t\t} );\n\t}\n\n\t/**\n\t * Event handler, handles notification ready events\n\t *\n\t * @param {NotifierNotificationComponent} notificationComponent Notification component reference\n\t */\n\tpublic onNotificationReady( notificationComponent: NotifierNotificationComponent ): void {\n\t\tlet currentNotification: NotifierNotification = this.notifications[ this.notifications.length - 1 ]; // Get the latest notification\n\t\tcurrentNotification.component = notificationComponent; // Save the new omponent reference\n\t\tthis.continueHandleShowAction( currentNotification ); // Continue with handling the show action\n\t}\n\n\t/**\n\t * Handle incoming actions by mapping action types to methods, and then running them\n\t *\n\t * @param   {NotifierAction}     action Action object\n\t * @returns {Promise<undefined>}        Promise, resolved when done\n\t */\n\tprivate handleAction( action: NotifierAction ): Promise<undefined> {\n\t\tswitch ( action.type ) { // TODO: Maybe a map (actionType -> class method) is a cleaner solution here?\n\t\t\tcase 'SHOW':\n\t\t\t\treturn this.handleShowAction( action );\n\t\t\tcase 'HIDE':\n\t\t\t\treturn this.handleHideAction( action );\n\t\t\tcase 'HIDE_OLDEST':\n\t\t\t\treturn this.handleHideOldestAction( action );\n\t\t\tcase 'HIDE_NEWEST':\n\t\t\t\treturn this.handleHideNewestAction( action );\n\t\t\tcase 'HIDE_ALL':\n\t\t\t\treturn this.handleHideAllAction( action );\n\t\t\tdefault:\n\t\t\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\t\t\t\t\tresolve(); // Ignore unknown action types\n\t\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Show a new notification\n\t *\n\t * We simply add the notification to the list, and then wait until its properly initialized / created / rendered.\n\t *\n\t * @param   {NotifierAction}     action Action object\n\t * @returns {Promise<undefined>}        Promise, resolved when done\n\t */\n\tprivate handleShowAction( action: NotifierAction ): Promise<undefined> {\n\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\t\t\tthis.tempPromiseResolver = resolve; // Save the promise resolve function so that it can be called later on by another method\n\t\t\tthis.addNotificationToList( new NotifierNotification( action.payload ) );\n\t\t} );\n\t}\n\n\t/**\n\t * Continue to show a new notification (after the notification components is initialized / created / rendered).\n\t *\n\t * If this is the first (and thus only) notification, we can simply show it. Otherwhise, if stacking is disabled (or a low value), we\n\t * switch out notifications, in particular we hide the existing one, and then show our new one. Yet, if stacking is enabled, we first\n\t * shift all older notifications, and then show our new notification. In addition, if there are too many notification on the screen,\n\t * we hide the oldest one first. Furthermore, if configured, animation overlapping is applied.\n\t *\n\t * @param {NotifierNotification} notification New notification to show\n\t */\n\tprivate continueHandleShowAction( notification: NotifierNotification ): void {\n\n\t\t// First (which means only one) notification in the list?\n\t\tconst numberOfNotifications: number = this.notifications.length;\n\t\tif ( numberOfNotifications === 1 ) {\n\t\t\tnotification.component.show().then( this.tempPromiseResolver ); // Done\n\t\t} else {\n\n\t\t\tconst implicitStackingLimit: number = 2;\n\n\t\t\t// Stacking enabled? (stacking value below 2 means stacking is disabled)\n\t\t\tif ( this.config.behaviour.stacking === false || this.config.behaviour.stacking < implicitStackingLimit ) {\n\t\t\t\tthis.notifications[ 0 ].component.hide().then( () => {\n\t\t\t\t\tthis.removeNotificationFromList( this.notifications[ 0 ] );\n\t\t\t\t\tnotification.component.show().then( this.tempPromiseResolver ); // Done\n\t\t\t\t} );\n\t\t\t} else {\n\n\t\t\t\tconst stepPromises: Array<Promise<undefined>> = [];\n\n\t\t\t\t// Are there now too many notifications?\n\t\t\t\tif ( numberOfNotifications > this.config.behaviour.stacking ) {\n\n\t\t\t\t\tconst oldNotifications: Array<NotifierNotification> = this.notifications.slice( 1, numberOfNotifications - 1 );\n\n\t\t\t\t\t// Are animations enabled?\n\t\t\t\t\tif ( this.config.animations.enabled ) {\n\n\t\t\t\t\t\t// Is animation overlap enabled?\n\t\t\t\t\t\tif ( this.config.animations.overlap !== false && this.config.animations.overlap > 0 ) {\n\t\t\t\t\t\t\tstepPromises.push( this.notifications[ 0 ].component.hide() );\n\t\t\t\t\t\t\tsetTimeout( () => {\n\t\t\t\t\t\t\t\tstepPromises.push( this.shiftNotifications( oldNotifications, notification.component.getHeight(), true ) );\n\t\t\t\t\t\t\t}, this.config.animations.hide.speed - this.config.animations.overlap );\n\t\t\t\t\t\t\tsetTimeout( () => {\n\t\t\t\t\t\t\t\tstepPromises.push( notification.component.show() );\n\t\t\t\t\t\t\t}, this.config.animations.hide.speed + this.config.animations.shift.speed - this.config.animations.overlap );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstepPromises.push( new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\t\t\t\t\t\t\t\tthis.notifications[ 0 ].component.hide().then( () => {\n\t\t\t\t\t\t\t\t\tthis.shiftNotifications( oldNotifications, notification.component.getHeight(), true ).then( () => {\n\t\t\t\t\t\t\t\t\t\tnotification.component.show().then( resolve );\n\t\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t} ) );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstepPromises.push( this.notifications[ 0 ].component.hide() );\n\t\t\t\t\t\tstepPromises.push( this.shiftNotifications( oldNotifications, notification.component.getHeight(), true ) );\n\t\t\t\t\t\tstepPromises.push( notification.component.show() );\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst oldNotifications: Array<NotifierNotification> = this.notifications.slice( 0, numberOfNotifications - 1 );\n\n\t\t\t\t\t// Are animations enabled?\n\t\t\t\t\tif ( this.config.animations.enabled ) {\n\n\t\t\t\t\t\t// Is animation overlap enabled?\n\t\t\t\t\t\tif ( this.config.animations.overlap !== false && this.config.animations.overlap > 0 ) {\n\t\t\t\t\t\t\tstepPromises.push( this.shiftNotifications( oldNotifications, notification.component.getHeight(), true ) );\n\t\t\t\t\t\t\tsetTimeout( () => {\n\t\t\t\t\t\t\t\tstepPromises.push( notification.component.show() );\n\t\t\t\t\t\t\t}, this.config.animations.shift.speed - this.config.animations.overlap );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstepPromises.push( new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\t\t\t\t\t\t\t\tthis.shiftNotifications( oldNotifications, notification.component.getHeight(), true ).then( () => {\n\t\t\t\t\t\t\t\t\tnotification.component.show().then( resolve );\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t} ) );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstepPromises.push( this.shiftNotifications( oldNotifications, notification.component.getHeight(), true ) );\n\t\t\t\t\t\tstepPromises.push( notification.component.show() );\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tPromise.all( stepPromises ).then( () => {\n\t\t\t\t\tif ( numberOfNotifications > this.config.behaviour.stacking ) {\n\t\t\t\t\t\tthis.removeNotificationFromList( this.notifications[ 0 ] );\n\t\t\t\t\t}\n\t\t\t\t\tthis.tempPromiseResolver();\n\t\t\t\t} ); // Done\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Hide an existing notification\n\t *\n\t * Fist, we skip everything if there are no notifications at all, or the given notification does not exist. Then, we hide the given\n\t * notification. If there exist older notifications, we then shift them around to fill the gap. Once both hiding the given notification\n\t * and shifting the older notificaitons is done, the given notification gets finally removed (from the DOM).\n\t *\n\t * @param   {NotifierAction}     action Action object, payload contains the notification ID\n\t * @returns {Promise<undefined>}        Promise, resolved when done\n\t */\n\tprivate handleHideAction( action: NotifierAction ): Promise<undefined> {\n\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\n\t\t\tconst stepPromises: Array<Promise<undefined>> = [];\n\n\t\t\t// Does the notification exist / are there even any notifications? (let's prevent accidential errors)\n\t\t\tconst notification: NotifierNotification | undefined = this.findNotificationById( action.payload );\n\t\t\tif ( notification === undefined ) {\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get older notifications\n\t\t\tconst notificationIndex: number | undefined = this.findNotificationIndexById( action.payload );\n\t\t\tif ( notificationIndex === undefined ) {\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst oldNotifications: Array<NotifierNotification> = this.notifications.slice( 0, notificationIndex );\n\n\t\t\t// Do older notifications exist, and thus do we need to shift other notifications as a consequence?\n\t\t\tif ( oldNotifications.length > 0 ) {\n\n\t\t\t\t// Are animations enabled?\n\t\t\t\tif ( this.config.animations.enabled && this.config.animations.hide.speed > 0 ) {\n\n\t\t\t\t\t// Is animation overlap enabled?\n\t\t\t\t\tif ( this.config.animations.overlap !== false && this.config.animations.overlap > 0 ) {\n\t\t\t\t\t\tstepPromises.push( notification.component.hide() );\n\t\t\t\t\t\tsetTimeout( () => {\n\t\t\t\t\t\t\tstepPromises.push( this.shiftNotifications( oldNotifications, notification.component.getHeight(), false ) );\n\t\t\t\t\t\t}, this.config.animations.hide.speed - this.config.animations.overlap );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnotification.component.hide().then( () => {\n\t\t\t\t\t\t\tstepPromises.push( this.shiftNotifications( oldNotifications, notification.component.getHeight(), false ) );\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstepPromises.push( notification.component.hide() );\n\t\t\t\t\tstepPromises.push( this.shiftNotifications( oldNotifications, notification.component.getHeight(), false ) );\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tstepPromises.push( notification.component.hide() );\n\n\t\t\t}\n\n\t\t\t// Wait until both hiding and shifting is done, then remove the notification from the list\n\t\t\tPromise.all( stepPromises ).then( () => {\n\t\t\t\tthis.removeNotificationFromList( notification );\n\t\t\t\tresolve(); // Done\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Hide the oldest notification (bridge to handleHideAction)\n\t *\n\t * @param   {NotifierAction}     action Action object\n\t * @returns {Promise<undefined>}        Promise, resolved when done\n\t */\n\tprivate handleHideOldestAction( action: NotifierAction ): Promise<undefined> {\n\n\t\t// Are there any notifications? (prevent accidential errors)\n\t\tif ( this.notifications.length === 0 ) {\n\t\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\t\t\t\tresolve();\n\t\t\t} ); // Done\n\t\t} else {\n\t\t\taction.payload = this.notifications[ 0 ].id;\n\t\t\treturn this.handleHideAction( action );\n\t\t}\n\n\t}\n\n\t/**\n\t * Hide the newest notification (bridge to handleHideAction)\n\t *\n\t * @param   {NotifierAction}     action Action object\n\t * @returns {Promise<undefined>}        Promise, resolved when done\n\t */\n\tprivate handleHideNewestAction( action: NotifierAction ): Promise<undefined> {\n\n\t\t// Are there any notifications? (prevent accidential errors)\n\t\tif ( this.notifications.length === 0 ) {\n\t\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\t\t\t\tresolve();\n\t\t\t} ); // Done\n\t\t} else {\n\t\t\taction.payload = this.notifications[ this.notifications.length - 1 ].id;\n\t\t\treturn this.handleHideAction( action );\n\t\t}\n\n\t}\n\n\t/**\n\t * Hide all notifications at once\n\t *\n\t * @param   {NotifierAction}     action Action object\n\t * @returns {Promise<undefined>}        Promise, resolved when done\n\t */\n\tprivate handleHideAllAction( action: NotifierAction ): Promise<undefined> {\n\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\n\t\t\t// Are there any notifications? (prevent accidential errors)\n\t\t\tconst numberOfNotifications: number = this.notifications.length;\n\t\t\tif ( numberOfNotifications === 0 ) {\n\t\t\t\tresolve(); // Done\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Are animations enabled?\n\t\t\tif ( this.config.animations.enabled && this.config.animations.hide.speed > 0 && this.config.animations.hide.offset !== false &&\n\t\t\t\tthis.config.animations.hide.offset > 0 ) {\n\n\t\t\t\tfor ( let i: number = numberOfNotifications - 1; i >= 0; i-- ) {\n\t\t\t\t\tconst animationOffset: number = this.config.position.vertical.position === 'top' ? numberOfNotifications - 1 : i;\n\t\t\t\t\tsetTimeout( () => {\n\t\t\t\t\t\tthis.notifications[ i ].component.hide().then( () => {\n\n\t\t\t\t\t\t\t// Are we done here, was this the last notification to be hidden?\n\t\t\t\t\t\t\tif ( ( this.config.position.vertical.position === 'top' && i === 0 ) ||\n\t\t\t\t\t\t\t\t( this.config.position.vertical.position === 'bottom' && i === numberOfNotifications - 1 ) ) {\n\t\t\t\t\t\t\t\tthis.removeAllNotificationsFromList();\n\t\t\t\t\t\t\t\tresolve(); // Done\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\t\t\t\t\t}, this.config.animations.hide.offset * animationOffset );\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tlet stepPromises: Array<Promise<undefined>> = [];\n\t\t\t\tfor ( let i: number = numberOfNotifications - 1; i >= 0; i-- ) {\n\t\t\t\t\tstepPromises.push( this.notifications[ i ].component.hide() );\n\t\t\t\t}\n\t\t\t\tPromise.all( stepPromises ).then( () => {\n\t\t\t\t\tthis.removeAllNotificationsFromList();\n\t\t\t\t\tresolve(); // Done\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} );\n\t}\n\n\t/**\n\t * Shift multiple notifications at once\n\t *\n\t * @param   {Array<NotifierNotification>} notifications List containing the notifications to be shifted\n\t * @param   {number}                      distance      Distance to shift (in px)\n\t * @param   {boolean}                     toMakePlace   Flag, defining in which direciton to shift\n\t * @returns {Promise<undefined>}                        Promise, resolved when done\n\t */\n\tprivate shiftNotifications( notifications: Array<NotifierNotification>, distance: number, toMakePlace: boolean ): Promise<undefined> {\n\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\n\t\t\t// Are there any notifications to shift?\n\t\t\tif ( notifications.length === 0 ) {\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet notificationPromises: Array<Promise<undefined>> = [];\n\t\t\tfor ( let i: number = notifications.length - 1; i >= 0; i-- ) {\n\t\t\t\tnotificationPromises.push( notifications[ i ].component.shift( distance, toMakePlace ) );\n\t\t\t}\n\t\t\tPromise.all( notificationPromises ).then( resolve ); // Done\n\n\t\t} );\n\t}\n\n\t/**\n\t * Add a new notification to the list of notifications (triggers change detection)\n\t *\n\t * @param {NotifierNotification} notification Notification to add to the list of notifications\n\t */\n\tprivate addNotificationToList( notification: NotifierNotification ): void {\n\t\tthis.notifications.push( notification );\n\t\tthis.changeDetector.markForCheck(); // Run change detection because the notification list changed\n\t}\n\n\t/**\n\t * Remove an existing notification from the list of notifications (triggers change detection)\n\t *\n\t * @param {NotifierNotification} notification Notification to be removed from the list of notifications\n\t */\n\tprivate removeNotificationFromList( notification: NotifierNotification ): void {\n\t\tthis.notifications =\n\t\t\tthis.notifications.filter( ( item: NotifierNotification ) => item.component !== notification.component );\n\t\tthis.changeDetector.markForCheck(); // Run change detection because the notification list changed\n\t}\n\n\t/**\n\t * Remove all notifications from the list (triggers change detection)\n\t */\n\tprivate removeAllNotificationsFromList(): void {\n\t\tthis.notifications = [];\n\t\tthis.changeDetector.markForCheck(); // Run change detection because the notification list changed\n\t}\n\n\t/**\n\t * Helper: Find a notification in the notification list by a given notification ID\n\t *\n\t * @param   {string}                           notificationId Notification ID, used for finding notification\n\t * @returns {NotifierNotification | undefined}                Notification, undefined if not found\n\t */\n\tprivate findNotificationById( notificationId: string ): NotifierNotification | undefined {\n\t\treturn this.notifications.find( ( currentNotification: NotifierNotification ) => currentNotification.id === notificationId );\n\t}\n\n\t/**\n\t * Helper: Find a notification's index by a given notification ID\n\t *\n\t * @param   {string}             notificationId Notification ID, used for finding a notification's index\n\t * @returns {number | undefined}                Notification index, undefined if not found\n\t */\n\tprivate findNotificationIndexById( notificationId: string ): number | undefined {\n\t\tconst notificationIndex: number =\n\t\t\tthis.notifications.findIndex( ( currentNotification: NotifierNotification ) => currentNotification.id === notificationId );\n\t\treturn ( notificationIndex !== -1 ? notificationIndex : undefined );\n\t}\n\n}\n","import { NotifierAnimationPreset, NotifierAnimationPresetKeyframes } from './../models/notifier-animation.model';\nimport { NotifierNotification } from './../models/notifier-notification.model';\n\n/**\n * Fade animation preset\n */\nexport const fade: NotifierAnimationPreset = {\n\thide: ( notification: NotifierNotification ): NotifierAnimationPresetKeyframes => {\n\t\treturn {\n\t\t\tfrom: {\n\t\t\t\topacity: '1'\n\t\t\t},\n\t\t\tto: {\n\t\t\t\topacity: '0'\n\t\t\t}\n\t\t};\n\t},\n\tshow: ( notification: NotifierNotification ): NotifierAnimationPresetKeyframes => {\n\t\treturn {\n\t\t\tfrom: {\n\t\t\t\topacity: '0'\n\t\t\t},\n\t\t\tto: {\n\t\t\t\topacity: '1'\n\t\t\t}\n\t\t};\n\t}\n};\n","import { NotifierAnimationPreset, NotifierAnimationPresetKeyframes } from './../models/notifier-animation.model';\nimport { NotifierConfig } from './../models/notifier-config.model';\nimport { NotifierNotification } from './../models/notifier-notification.model';\n\n/**\n * Slide animation preset\n */\nexport const slide: NotifierAnimationPreset = {\n\thide: ( notification: NotifierNotification ): NotifierAnimationPresetKeyframes => {\n\n\t\t// Prepare variables\n\t\tconst config: NotifierConfig = notification.component.getConfig();\n\t\tconst shift: number = notification.component.getShift();\n\t\tlet from: {\n\t\t\t[ animatablePropertyName: string ]: string;\n\t\t};\n\t\tlet to: {\n\t\t\t[ animatablePropertyName: string ]: string;\n\t\t};\n\n\t\t// Configure variables, depending on configuration and component\n\t\tif ( config.position.horizontal.position === 'left' ) {\n\t\t\tfrom = {\n\t\t\t\ttransform: `translate3d( 0, ${ shift }px, 0 )`\n\t\t\t};\n\t\t\tto = {\n\t\t\t\ttransform: `translate3d( calc( -100% - ${ config.position.horizontal.distance }px - 10px ), ${ shift }px, 0 )`\n\t\t\t};\n\t\t} else if ( config.position.horizontal.position === 'right' ) {\n\t\t\tfrom = {\n\t\t\t\ttransform: `translate3d( 0, ${ shift }px, 0 )`\n\t\t\t};\n\t\t\tto = {\n\t\t\t\ttransform: `translate3d( calc( 100% + ${ config.position.horizontal.distance }px + 10px ), ${ shift }px, 0 )`\n\t\t\t};\n\t\t} else {\n\t\t\tlet horizontalPosition: string;\n\t\t\tif ( config.position.vertical.position === 'top' ) {\n\t\t\t\thorizontalPosition = `calc( -100% - ${ config.position.horizontal.distance }px - 10px )`;\n\t\t\t} else {\n\t\t\t\thorizontalPosition = `calc( 100% + ${ config.position.horizontal.distance }px + 10px )`;\n\t\t\t}\n\t\t\tfrom = {\n\t\t\t\ttransform: `translate3d( -50%, ${ shift }px, 0 )`\n\t\t\t};\n\t\t\tto = {\n\t\t\t\ttransform: `translate3d( -50%, ${ horizontalPosition }, 0 )`\n\t\t\t};\n\t\t}\n\n\t\t// Done\n\t\treturn {\n\t\t\tfrom,\n\t\t\tto\n\t\t};\n\n\t},\n\tshow: ( notification: NotifierNotification ): NotifierAnimationPresetKeyframes => {\n\n\t\t// Prepare variables\n\t\tconst config: NotifierConfig = notification.component.getConfig();\n\t\tlet from: {\n\t\t\t[ animatablePropertyName: string ]: string;\n\t\t};\n\t\tlet to: {\n\t\t\t[ animatablePropertyName: string ]: string;\n\t\t};\n\n\t\t// Configure variables, depending on configuration and component\n\t\tif ( config.position.horizontal.position === 'left' ) {\n\t\t\tfrom = {\n\t\t\t\ttransform: `translate3d( calc( -100% - ${ config.position.horizontal.distance }px - 10px ), 0, 0 )`\n\t\t\t};\n\t\t\tto = {\n\t\t\t\ttransform: 'translate3d( 0, 0, 0 )'\n\t\t\t};\n\t\t} else if ( config.position.horizontal.position === 'right' ) {\n\t\t\tfrom = {\n\t\t\t\ttransform: `translate3d( calc( 100% + ${ config.position.horizontal.distance }px + 10px ), 0, 0 )`\n\t\t\t};\n\t\t\tto = {\n\t\t\t\ttransform: 'translate3d( 0, 0, 0 )'\n\t\t\t};\n\t\t} else {\n\t\t\tlet horizontalPosition: string;\n\t\t\tif ( config.position.vertical.position === 'top' ) {\n\t\t\t\thorizontalPosition = `calc( -100% - ${ config.position.horizontal.distance }px - 10px )`;\n\t\t\t} else {\n\t\t\t\thorizontalPosition = `calc( 100% + ${ config.position.horizontal.distance }px + 10px )`;\n\t\t\t}\n\t\t\tfrom = {\n\t\t\t\ttransform: `translate3d( -50%, ${ horizontalPosition }, 0 )`\n\t\t\t};\n\t\t\tto = {\n\t\t\t\ttransform: 'translate3d( -50%, 0, 0 )'\n\t\t\t};\n\t\t}\n\n\t\t// Done\n\t\treturn {\n\t\t\tfrom,\n\t\t\tto\n\t\t};\n\n\t}\n};\n","import { Injectable } from '@angular/core';\n\nimport { NotifierAnimationData, NotifierAnimationPreset, NotifierAnimationPresetKeyframes } from './../models/notifier-animation.model';\nimport { NotifierNotification } from './../models/notifier-notification.model';\nimport { fade } from './../animation-presets/fade.animation-preset';\nimport { slide } from './../animation-presets/slide.animation-preset';\n\n/**\n * Notifier animation service\n */\n@Injectable()\nexport class NotifierAnimationService {\n\n\t/**\n\t * List of animation presets (currently static)\n\t */\n\tprivate readonly animationPresets: {\n\t\t[ animationPresetName: string ]: NotifierAnimationPreset\n\t};\n\n\t/**\n\t * Constructor\n\t */\n\tpublic constructor() {\n\t\tthis.animationPresets = {\n\t\t\tfade,\n\t\t\tslide\n\t\t};\n\t}\n\n\t/**\n\t * Get animation data\n\t *\n\t * This method generates all data the Web Animations API needs to animate our notification. The result depends on both the animation\n\t * direction (either in or out) as well as the notifications (and its attributes) itself.\n\t *\n\t * @param   {'show' | 'hide'}       direction    Animation direction, either in or out\n\t * @param   {NotifierNotification}  notification Notification the animation data should be generated for\n\t * @returns {NotifierAnimationData}              Animation information\n\t */\n\tpublic getAnimationData( direction: 'show' | 'hide', notification: NotifierNotification ): NotifierAnimationData {\n\n\t\t// Get all necessary animation data\n\t\tlet keyframes: NotifierAnimationPresetKeyframes;\n\t\tlet duration: number;\n\t\tlet easing: string;\n\t\tif ( direction === 'show' ) {\n\t\t\tkeyframes = this.animationPresets[ notification.component.getConfig().animations.show.preset ].show( notification );\n\t\t\tduration = notification.component.getConfig().animations.show.speed;\n\t\t\teasing = notification.component.getConfig().animations.show.easing;\n\t\t} else {\n\t\t\tkeyframes = this.animationPresets[ notification.component.getConfig().animations.hide.preset ].hide( notification );\n\t\t\tduration = notification.component.getConfig().animations.hide.speed;\n\t\t\teasing = notification.component.getConfig().animations.hide.easing;\n\t\t}\n\n\t\t// Build and return animation data\n\t\treturn {\n\t\t\tkeyframes: [\n\t\t\t\tkeyframes.from,\n\t\t\t\tkeyframes.to\n\t\t\t],\n\t\t\toptions: {\n\t\t\t\tduration,\n\t\t\t\teasing,\n\t\t\t\tfill: 'forwards' // Keep the newly painted state after the animation finished\n\t\t\t}\n\t\t};\n\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * Notifier timer service\n *\n * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a\n * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.\n */\n@Injectable()\nexport class NotifierTimerService {\n\n\t/**\n\t * Timestamp (in ms), created in the moment the timer starts\n\t */\n\tprivate now: number;\n\n\t/**\n\t * Remaining time (in ms)\n\t */\n\tprivate remaining: number;\n\n\t/**\n\t * Timeout ID, used for clearing the timeout later on\n\t */\n\tprivate timerId: number;\n\n\t/**\n\t * Promise resolve function, eventually getting called once the timer finishes\n\t */\n\tprivate finishPromiseResolver: () => void;\n\n\t/**\n\t * Constructor\n\t */\n\tpublic constructor() {\n\t\tthis.now = 0;\n\t\tthis.remaining = 0;\n\t}\n\n\t/**\n\t * Start (or resume) the timer\n\t *\n\t * @param   {number}             duration Timer duration, in ms\n\t * @returns {Promise<undefined>}          Promise, resolved once the timer finishes\n\t */\n\tpublic start( duration: number ): Promise<undefined> {\n\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\n\t\t\t// For the first run ...\n\t\t\tthis.remaining = duration;\n\n\t\t\t// Setup, then start the timer\n\t\t\tthis.finishPromiseResolver = resolve;\n\t\t\tthis.continue();\n\n\t\t} );\n\t}\n\n\t/**\n\t * Pause the timer\n\t */\n\tpublic pause(): void {\n\t\tclearTimeout( this.timerId );\n\t\tthis.remaining -= new Date().getTime() - this.now;\n\t}\n\n\t/**\n\t * Continue the timer\n\t */\n\tpublic continue(): void {\n\t\tthis.now = new Date().getTime();\n\t\tthis.timerId = setTimeout( () => {\n\t\t\tthis.finish();\n\t\t}, this.remaining );\n\t}\n\n\t/**\n\t * Stop the timer\n\t */\n\tpublic stop(): void {\n\t\tclearTimeout( this.timerId );\n\t\tthis.remaining = 0;\n\t}\n\n\t/**\n\t * Finish up the timeout by resolving the timer promise\n\t */\n\tprivate finish(): void {\n\t\tthis.finishPromiseResolver();\n\t}\n\n}\n","import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, Renderer2 } from '@angular/core';\n\nimport { NotifierAnimationData } from './../models/notifier-animation.model';\nimport { NotifierAnimationService } from './../services/notifier-animation.service';\nimport { NotifierConfig } from './../models/notifier-config.model';\nimport { NotifierNotification } from './../models/notifier-notification.model';\nimport { NotifierService } from './../services/notifier.service';\nimport { NotifierTimerService } from './../services/notifier-timer.service';\n\n/**\n * Notifier notification component\n * -------------------------------\n * This component is responsible for actually displaying the notification on screen. In addition, it's able to show and hide this\n * notification, in particular to animate this notification in and out, as well as shift (move) this notification vertically around.\n * Furthermore, the notification component handles all interactions the user has with this notification / component, such as clicks and\n * mouse movements.\n */\n@Component( {\n\tchangeDetection: ChangeDetectionStrategy.OnPush, // (#perfmatters)\n\thost: {\n\t\t'(click)': 'onNotificationClick()',\n\t\t'(mouseout)': 'onNotificationMouseout()',\n\t\t'(mouseover)': 'onNotificationMouseover()',\n\t\tclass: 'notifier__notification'\n\t},\n\tproviders: [\n\t\t// We provide the timer to the component's local injector, so that every notification components gets its own\n\t\t// instance of the timer service, thus running their timers independently from each other\n\t\tNotifierTimerService\n\t],\n\tselector: 'notifier-notification',\n\ttemplate: `<p class=\"notifier__notification-message\">{{ notification.message }}</p><button class=\"notifier__notification-button\" type=\"button\" title=\"dismiss\" *ngIf=\"config.behaviour.showDismissButton\" (click)=\"onClickDismiss()\"><svg class=\"notifier__notification-button-icon\" viewBox=\"0 0 24 24\" width=\"20\" height=\"20\"><path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"/></svg></button>`\n} )\nexport class NotifierNotificationComponent implements AfterViewInit {\n\n\t/**\n\t * Input: Notification object, contains all details necessary to construct the notification\n\t */\n\t@Input()\n\tpublic notification: NotifierNotification;\n\n\t/**\n\t * Output: Ready event, handles the initialization success by emitting a reference to this notification component\n\t */\n\t@Output()\n\tpublic ready: EventEmitter<NotifierNotificationComponent>;\n\n\t/**\n\t * Output: Dismiss event, handles the click on the dismiss button by emitting the notification ID of this notification component\n\t */\n\t@Output()\n\tpublic dismiss: EventEmitter<string>;\n\n\t/**\n\t * Notifier configuration\n\t */\n\tpublic readonly config: NotifierConfig;\n\n\t/**\n\t * Notifier timer service\n\t */\n\tprivate readonly timerService: NotifierTimerService;\n\n\t/**\n\t * Notifier animation service\n\t */\n\tprivate readonly animationService: NotifierAnimationService;\n\n\t/**\n\t * Angular renderer, used to preserve the overall DOM abstraction & independence\n\t */\n\tprivate readonly renderer: Renderer2;\n\n\t/**\n\t * Native element reference, used for manipulating DOM properties\n\t */\n\tprivate readonly element: HTMLElement;\n\n\t/**\n\t * Current notification height, calculated and cached here (#perfmatters)\n\t */\n\tprivate elementHeight: number;\n\n\t/**\n\t * Current notification width, calculated and cached here (#perfmatters)\n\t */\n\tprivate elementWidth: number;\n\n\t/**\n\t * Current notification shift, calculated and cached here (#perfmatters)\n\t */\n\tprivate elementShift: number;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param {ElementRef}               elementRef               Reference to the component's element\n\t * @param {Renderer2}                renderer                 Angular renderer\n\t * @param {NotifierService}          notifierService          Notifier service\n\t * @param {NotifierTimerService}     notifierTimerService     Notifier timer service\n\t * @param {NotifierAnimationService} notifierAnimationService Notifier animation service\n\t */\n\tpublic constructor( elementRef: ElementRef, renderer: Renderer2, notifierService: NotifierService,\n\t\tnotifierTimerService: NotifierTimerService, notifierAnimationService: NotifierAnimationService ) {\n\t\tthis.config = notifierService.getConfig();\n\t\tthis.ready = new EventEmitter<NotifierNotificationComponent>();\n\t\tthis.dismiss = new EventEmitter<string>();\n\t\tthis.timerService = notifierTimerService;\n\t\tthis.animationService = notifierAnimationService;\n\t\tthis.renderer = renderer;\n\t\tthis.element = elementRef.nativeElement;\n\t\tthis.elementShift = 0;\n\t}\n\n\t/**\n\t * Component after view init lifecycle hook, setts up the component and then emits the ready event\n\t */\n\tpublic ngAfterViewInit(): void {\n\t\tthis.setup();\n\t\tthis.elementHeight = this.element.offsetHeight;\n\t\tthis.elementWidth = this.element.offsetWidth;\n\t\tthis.ready.emit( this );\n\t}\n\n\t/**\n\t * Get the notifier config\n\t *\n\t * @returns {NotifierConfig} Notifier configuration\n\t */\n\tpublic getConfig(): NotifierConfig {\n\t\treturn this.config;\n\t}\n\n\t/**\n\t * Get notification element height (in px)\n\t *\n\t * @returns {number} Notification element height (in px)\n\t */\n\tpublic getHeight(): number {\n\t\treturn this.elementHeight;\n\t}\n\n\t/**\n\t * Get notification element width (in px)\n\t *\n\t * @returns {number} Notification element height (in px)\n\t */\n\tpublic getWidth(): number {\n\t\treturn this.elementWidth;\n\t}\n\n\t/**\n\t * Get notification shift offset (in px)\n\t *\n\t * @returns {number} Notification element shift offset (in px)\n\t */\n\tpublic getShift(): number {\n\t\treturn this.elementShift;\n\t}\n\n\t/**\n\t * Show (animate in) this notification\n\t *\n\t * @returns {Promise<undefined>} Promise, resolved when done\n\t */\n\tpublic show(): Promise<undefined> {\n\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\n\t\t\t// Are animations enabled?\n\t\t\tif ( this.config.animations.enabled && this.config.animations.show.speed > 0 ) {\n\n\t\t\t\t// Get animation data\n\t\t\t\tconst animationData: NotifierAnimationData = this.animationService.getAnimationData( 'show', this.notification );\n\n\t\t\t\t// Set initial styles (styles before animation), prevents quick flicker when animation starts\n\t\t\t\tconst animatedProperties: Array<string> = Object.keys( animationData.keyframes[ 0 ] );\n\t\t\t\tfor ( let i: number = animatedProperties.length - 1; i >= 0; i-- ) {\n\t\t\t\t\tthis.renderer.setStyle( this.element, animatedProperties[ i ],\n\t\t\t\t\t\tanimationData.keyframes[ 0 ][ animatedProperties[ i ] ] );\n\t\t\t\t}\n\n\t\t\t\t// Animate notification in\n\t\t\t\tthis.renderer.setStyle( this.element, 'visibility', 'visible' );\n\t\t\t\tconst animation: Animation = this.element.animate( animationData.keyframes, animationData.options );\n\t\t\t\tanimation.onfinish = () => {\n\t\t\t\t\tthis.startAutoHideTimer();\n\t\t\t\t\tresolve(); // Done\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\t// Show notification\n\t\t\t\tthis.renderer.setStyle( this.element, 'visibility', 'visible' );\n\t\t\t\tthis.startAutoHideTimer();\n\t\t\t\tresolve(); // Done\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Hide (animate out) this notification\n\t *\n\t * @returns {Promise<undefined>} Promise, resolved when done\n\t */\n\tpublic hide(): Promise<undefined> {\n\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\n\t\t\tthis.stopAutoHideTimer();\n\n\t\t\t// Are animations enabled?\n\t\t\tif ( this.config.animations.enabled && this.config.animations.hide.speed > 0 ) {\n\t\t\t\tconst animationData: NotifierAnimationData = this.animationService.getAnimationData( 'hide', this.notification );\n\t\t\t\tconst animation: Animation = this.element.animate( animationData.keyframes, animationData.options );\n\t\t\t\tanimation.onfinish = () => {\n\t\t\t\t\tresolve(); // Done\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tresolve(); // Done\n\t\t\t}\n\n\t\t} );\n\t}\n\n\t/**\n\t * Shift (move) this notification\n\t *\n\t * @param   {number}             distance         Distance to shift (in px)\n\t * @param   {boolean}            shiftToMakePlace Flag, defining in which direction to shift\n\t * @returns {Promise<undefined>}                  Promise, resolved when done\n\t */\n\tpublic shift( distance: number, shiftToMakePlace: boolean ): Promise<undefined> {\n\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\n\t\t\t// Calculate new position (position after the shift)\n\t\t\tlet newElementShift: number;\n\t\t\tif ( ( this.config.position.vertical.position === 'top' && shiftToMakePlace )\n\t\t\t\t|| ( this.config.position.vertical.position === 'bottom' && !shiftToMakePlace ) ) {\n\t\t\t\tnewElementShift = this.elementShift + distance + this.config.position.vertical.gap;\n\t\t\t} else {\n\t\t\t\tnewElementShift = this.elementShift - distance - this.config.position.vertical.gap;\n\t\t\t}\n\t\t\tconst horizontalPosition: string = this.config.position.horizontal.position === 'middle' ? '-50%' : '0';\n\n\t\t\t// Are animations enabled?\n\t\t\tif ( this.config.animations.enabled && this.config.animations.shift.speed > 0 ) {\n\t\t\t\tconst animationData: NotifierAnimationData = { // TODO: Extract into animation service\n\t\t\t\t\tkeyframes: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttransform: `translate3d( ${ horizontalPosition }, ${ this.elementShift }px, 0 )`\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttransform: `translate3d( ${ horizontalPosition }, ${ newElementShift }px, 0 )`\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tduration: this.config.animations.shift.speed,\n\t\t\t\t\t\teasing: this.config.animations.shift.easing,\n\t\t\t\t\t\tfill: 'forwards'\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tthis.elementShift = newElementShift;\n\t\t\t\tconst animation: Animation = this.element.animate( animationData.keyframes, animationData.options );\n\t\t\t\tanimation.onfinish = () => {\n\t\t\t\t\tresolve(); // Done\n\t\t\t\t};\n\n\t\t\t} else {\n\t\t\t\tthis.renderer.setStyle( this.element, 'transform', `translate3d( ${ horizontalPosition }, ${ newElementShift }px, 0 )` );\n\t\t\t\tthis.elementShift = newElementShift;\n\t\t\t\tresolve(); // Done\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Handle click on dismiss button\n\t */\n\tpublic onClickDismiss(): void {\n\t\tthis.dismiss.emit( this.notification.id );\n\t}\n\n\t/**\n\t * Handle mouseover over notification area\n\t */\n\tpublic onNotificationMouseover(): void {\n\t\tif ( this.config.behaviour.onMouseover === 'pauseAutoHide' ) {\n\t\t\tthis.pauseAutoHideTimer();\n\t\t} else if ( this.config.behaviour.onMouseover === 'resetAutoHide' ) {\n\t\t\tthis.stopAutoHideTimer();\n\t\t}\n\t}\n\n\t/**\n\t * Handle mouseout from notification area\n\t */\n\tpublic onNotificationMouseout(): void {\n\t\tif ( this.config.behaviour.onMouseover === 'pauseAutoHide' ) {\n\t\t\tthis.continueAutoHideTimer();\n\t\t} else if ( this.config.behaviour.onMouseover === 'resetAutoHide' ) {\n\t\t\tthis.startAutoHideTimer();\n\t\t}\n\t}\n\n\t/**\n\t * Handle click on notification area\n\t */\n\tpublic onNotificationClick(): void {\n\t\tif ( this.config.behaviour.onClick === 'hide' ) {\n\t\t\tthis.onClickDismiss();\n\t\t}\n\t}\n\n\t/**\n\t * Start the auto hide timer (if enabled)\n\t */\n\tprivate startAutoHideTimer(): void {\n\t\tif ( this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0 ) {\n\t\t\tthis.timerService.start( this.config.behaviour.autoHide ).then( () => {\n\t\t\t\tthis.onClickDismiss();\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Pause the auto hide timer (if enabled)\n\t */\n\tprivate pauseAutoHideTimer(): void {\n\t\tif ( this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0 ) {\n\t\t\tthis.timerService.pause();\n\t\t}\n\t}\n\n\t/**\n\t * Continue the auto hide timer (if enabled)\n\t */\n\tprivate continueAutoHideTimer(): void {\n\t\tif ( this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0 ) {\n\t\t\tthis.timerService.continue();\n\t\t}\n\t}\n\n\t/**\n\t * Stop the auto hide timer (if enabled)\n\t */\n\tprivate stopAutoHideTimer(): void {\n\t\tif ( this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0 ) {\n\t\t\tthis.timerService.stop();\n\t\t}\n\t}\n\n\t/**\n\t * Initial notification setup\n\t */\n\tprivate setup(): void {\n\n\t\t// Set start position (initially the exact same for every new notification)\n\t\tif ( this.config.position.horizontal.position === 'left' ) {\n\t\t\tthis.renderer.setStyle( this.element, 'left', `${ this.config.position.horizontal.distance }px` );\n\t\t} else if ( this.config.position.horizontal.position === 'right' ) {\n\t\t\tthis.renderer.setStyle( this.element, 'right', `${ this.config.position.horizontal.distance }px` );\n\t\t} else {\n\t\t\tthis.renderer.setStyle( this.element, 'left', '50%' );\n\t\t\t// Let's get the GPU handle some work as well (#perfmatters)\n\t\t\tthis.renderer.setStyle( this.element, 'transform', 'translate3d( -50%, 0, 0 )' );\n\t\t}\n\t\tif ( this.config.position.vertical.position === 'top' ) {\n\t\t\tthis.renderer.setStyle( this.element, 'top', `${ this.config.position.vertical.distance }px` );\n\t\t} else {\n\t\t\tthis.renderer.setStyle( this.element, 'bottom', `${ this.config.position.vertical.distance }px` );\n\t\t}\n\n\t\t// Add classes (responsible for visual design)\n\t\tthis.renderer.addClass( this.element, `notifier__notification--${ this.notification.type }` );\n\t\tthis.renderer.addClass( this.element, `notifier__notification--${ this.config.theme }` );\n\n\t}\n\n}\n","import { CommonModule } from '@angular/common';\nimport { InjectionToken, ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { NotifierContainerComponent } from './components/notifier-container.component';\nimport { NotifierNotificationComponent } from './components/notifier-notification.component';\nimport { NotifierConfig, NotifierOptions } from './models/notifier-config.model';\nimport { NotifierAnimationService } from './services/notifier-animation.service';\nimport { NotifierQueueService } from './services/notifier-queue.service';\nimport { NotifierService } from './services/notifier.service';\n\n// tslint:disable variable-name\n\n/**\n * Injection Token for notifier options\n */\nexport const NotifierOptionsToken: InjectionToken<NotifierOptions>\n\t= new InjectionToken<NotifierOptions>( '[angular-notifier] Notifier Options' );\n\n/**\n * Injection Token for notifier configuration\n */\nexport const NotifierConfigToken: InjectionToken<NotifierConfig>\n\t= new InjectionToken<NotifierConfig>( '[anuglar-notifier] Notifier Config' );\n\n// tslint:enable variable-name\n\n/**\n * Factory for a notifier configuration with custom options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @param   {NotifierOptions} options - Custom notifier options\n * @returns {NotifierConfig}          - Notifier configuration as result\n */\nexport function notifierCustomConfigFactory( options: NotifierOptions ): NotifierConfig {\n\treturn new NotifierConfig( options );\n}\n\n/**\n * Factory for a notifier configuration with default options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @returns {NotifierConfig} - Notifier configuration as result\n */\nexport function notifierDefaultConfigFactory(): NotifierConfig {\n\treturn new NotifierConfig( {} );\n}\n\n/**\n * Notifier module\n */\n@NgModule( {\n\tdeclarations: [\n\t\tNotifierContainerComponent,\n\t\tNotifierNotificationComponent\n\t],\n\texports: [\n\t\tNotifierContainerComponent\n\t],\n\timports: [\n\t\tCommonModule\n\t],\n\tproviders: [\n\t\tNotifierAnimationService,\n\t\tNotifierService,\n\t\tNotifierQueueService,\n\n\t\t// Provide the default notifier configuration if just the module is imported\n\t\t{\n\t\t\tprovide: NotifierConfigToken,\n\t\t\tuseFactory: notifierDefaultConfigFactory\n\t\t}\n\n\t]\n} )\nexport class NotifierModule {\n\n\t/**\n\t * Setup the notifier module with custom providers, in this case with a custom configuration based on the givne options\n\t *\n\t * @param   {NotifierOptions}     [options={}] - Custom notifier options\n\t * @returns {ModuleWithProviders}              - Notifier module with custom providers\n\t */\n\tpublic static withConfig( options: NotifierOptions = {} ): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: NotifierModule,\n\t\t\tproviders: [\n\n\t\t\t\t// Provide the options itself upfront (as we need to inject them as dependencies -- see below)\n\t\t\t\t{\n\t\t\t\t\tprovide: NotifierOptionsToken,\n\t\t\t\t\tuseValue: options\n\t\t\t\t},\n\n\t\t\t\t// Provide a custom notifier configuration, based on the given notifier options\n\t\t\t\t{\n\t\t\t\t\tdeps: [\n\t\t\t\t\t\tNotifierOptionsToken\n\t\t\t\t\t],\n\t\t\t\t\tprovide: NotifierConfigToken,\n\t\t\t\t\tuseFactory: notifierCustomConfigFactory\n\t\t\t\t}\n\n\t\t\t]\n\t\t};\n\t}\n\n}\n",null],"names":[],"mappings":"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"}